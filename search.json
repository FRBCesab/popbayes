[{"path":"https://frbcesab.github.io/popbayes/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://frbcesab.github.io/popbayes/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://frbcesab.github.io/popbayes/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://frbcesab.github.io/popbayes/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://frbcesab.github.io/popbayes/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://frbcesab.github.io/popbayes/articles/generate_data.html","id":"calculating-rmax","dir":"Articles","previous_headings":"","what":"Calculating rmax","title":"Get species information","text":"demographic potential species limited. intrinsic rate increase \\(rmax\\) maximum increase log population size species can attain year. According Sinclair (2003), related body mass adult females \\(W\\) formula: \\[ rmax = 1.375 \\times W^{-0.315} \\] Body masses found literature publications Kingdon & Hoffman (2013), Cornelis et al. (2014), Illius & Gordon (1992), Sinclair (1996), Suraud et al. (2012), Foley & Faust (2010). Alternatively, \\(rmax\\) can obtained specific demographic analyses. following table, listed \\(rmax\\) values obtained one method giving precedence specific analyses available.","code":"species_name <- c(\"Impala\", \"Tiang\", \"Blue wildebeest\", \"Roan\", \"Buffalo\",                    \"Eland\", \"Giraffe\", \"Elephant\")  adult_female_body_mass <- c(55, 127, 230, 250, 400, 450, 702, 2873)  species <- data.frame(adult_female_body_mass, row.names = species_name)  species$rmax <- 1.375 * adult_female_body_mass ^ (-0.315) species[\"Eland\", \"rmax\"]    <- 0.150                 # Sinclair (1996) species[\"Elephant\", \"rmax\"] <- 0.07                  # Foley & Faust (2010) species[\"Giraffe\", \"rmax\"]  <- 0.125                 # Suraud et al. (2012)  species #>                 adult_female_body_mass      rmax #> Impala                              55 0.3891244 #> Tiang                              127 0.2989541 #> Blue wildebeest                    230 0.2479468 #> Roan                               250 0.2415192 #> Buffalo                            400 0.2082830 #> Eland                              450 0.1500000 #> Giraffe                            702 0.1250000 #> Elephant                          2873 0.0700000"},{"path":"https://frbcesab.github.io/popbayes/articles/generate_data.html","id":"building-conversion-table","dir":"Articles","previous_headings":"","what":"Building conversion table","title":"Get species information","text":"Aerial ground counts directly comparable species better detected ground others air. generally considered small light species better detected ground large dark species better detected air. took advantage series counts carried parallel using two field methods calculate conversion factors applied aerial counts obtain ground count equivalents. permits reconciling two types counts within mixed series. also specify preferred field method category species.","code":"categories <- c(\"Medium light and brown species (20-150kg)\",                 \"Large light and brown species (>150kg)\",                 \"Large dark (>150kg)\", \"Giraffe\", \"Elephant\")  short_names        <- c(\"MLB\", \"LLB\", \"LD\", \"Giraffe\", \"Elephant\") conversion_facts   <- c(6.747, 2.302, 0.561, 3.011, 0.659) pref_field_methods <- c(\"G\", \"G\", \"A\", \"A\", \"A\")  category_info <- data.frame(\"category\"          = categories,                             \"acronym\"           = short_names,                             \"conversion_fact\"   = conversion_facts,                              \"pref_field_method\" = pref_field_methods) category_info #>                                    category  acronym conversion_fact #> 1 Medium light and brown species (20-150kg)      MLB           6.747 #> 2    Large light and brown species (>150kg)      LLB           2.302 #> 3                       Large dark (>150kg)       LD           0.561 #> 4                                   Giraffe  Giraffe           3.011 #> 5                                  Elephant Elephant           0.659 #>   pref_field_method #> 1                 G #> 2                 G #> 3                 A #> 4                 A #> 5                 A"},{"path":"https://frbcesab.github.io/popbayes/articles/generate_data.html","id":"categorizing-species","dir":"Articles","previous_headings":"","what":"Categorizing species","title":"Get species information","text":"relate species color/size category.","code":"species$\"category\" <- c(\"MLB\", \"MLB\", \"LLB\", \"LLB\", \"LD\", \"LLB\", \"Giraffe\",                          \"Elephant\") species #>                 adult_female_body_mass      rmax category #> Impala                              55 0.3891244      MLB #> Tiang                              127 0.2989541      MLB #> Blue wildebeest                    230 0.2479468      LLB #> Roan                               250 0.2415192      LLB #> Buffalo                            400 0.2082830       LD #> Eland                              450 0.1500000      LLB #> Giraffe                            702 0.1250000  Giraffe #> Elephant                          2873 0.0700000 Elephant"},{"path":"https://frbcesab.github.io/popbayes/articles/generate_data.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Get species information","text":"Cornelis D et al. (2014) Species account: African buffalo (Syncerus caffer). : Ecology, Evolution Behaviour Wild Cattle: Implications Conservation (Eds M Melletti & J Burton). Cambridge University Press, Cambridge. DOI: 10.1017/CBO9781139568098. Foley CAH & Faust LJ (2010) Rapid population growth elephant Loxodonta africana population recovering poaching Tarangire National Park, Tanzania. Oryx, 44, 205-212. DOI: 10.1017/S0030605309990706. Illius AW & Gordon IJ (1992) Modelling nutritional ecology ungulate herbivores: evolution body size competitive interactions. Oecologia, 89, 428-434. DOI: 10.1017/S0030605309990706. Kingdon J & Hoffman M (2013) Mammals Africa. Volume VI: Pigs, Hippopotamuses, Chevrotain, Giraffes, Deer Bovids. Bloomsbury Publishing, London, United Kingdom, 680 pp. Sinclair (1996) Mammal populations: fluctuation, regulation, life history theory, implications conservation. : Frontiers population ecology (Eds RB Floyd & AW Sheppard), pp. 127–154. CSIRO: Melbourne, Australia. Sinclair (2003) Mammal population regulation, keystone processes ecosystem dynamics. Philosophical Transactions: Biological Sciences, 358, 1729-1740. DOI: 10.1098/rstb.2003.1359. Suraud JP et al. (2012) Higher expected growth rate endangered West African giraffe Giraffa camelopardalis peralta: successful human–wildlife cohabitation. Oryx, 46, 577-583. DOI: 10.1017/S0030605311000639.","code":""},{"path":"https://frbcesab.github.io/popbayes/articles/popbayes.html","id":"the-garamba-dataset","dir":"Articles","previous_headings":"","what":"The Garamba dataset","title":"Get started","text":"package popbayes comes example dataset: garamba. contains counts individuals 10 African mammal species surveyed Garamba National Park (Democratic Republic Congo) 1976 2017.   Garamba dataset (first 20 rows)  dataset typical structure location field (location), species name field (species), date field (date), count field (count).","code":"## Define filename path ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\", package = \"popbayes\")  ## Read CSV file ---- garamba <- read.csv(file = file_path)"},{"path":"https://frbcesab.github.io/popbayes/articles/popbayes.html","id":"statistical-method","dir":"Articles","previous_headings":"The Garamba dataset","what":"Statistical method","title":"Get started","text":"addition fields location, species, date, count, fourth field mandatory: stat_method. field specifies census method produced count. can T total count, X guesstimate (.e. expert estimate), S sampling count. usable Bayesian model, individual counts accompanied information precision form 95% confidence interval. counts : T X, confidence interval computed automatically function format_data() according respectively following formulas: \\[ CI_{(T)} = [\\ 0.95 \\times count\\ ; 1.20 \\times count\\ ] \\] \\[ CI_{(X)} = [\\ 0.80 \\times count\\ ; 1.20 \\times count\\ ] \\] S, users need supply measure precision. Precision preferably provided form 95% CI means two fields: lower_ci upper_ci (garamba dataset). Alternatively, may also given form standard deviation (sd), variance (var), coefficient variation (cv). Note precision metrics can different counts. instance, S counts may sd value others lower_ci upper_ci. case, three precision columns required (lower_ci, upper_ci, sd). S count measure precision detected anomaly format_data() default. option na.rm = TRUE may used automatically remove counts series. desirable maintain counts count series, suggest enter value coefficient variation, e.g. average coefficient variation counts series.","code":""},{"path":"https://frbcesab.github.io/popbayes/articles/popbayes.html","id":"field-method","dir":"Articles","previous_headings":"The Garamba dataset","what":"Field method","title":"Get started","text":"Another optional column, field_method, may provided. refers type survey used collect data. can aerial survey G ground survey. column becomes mandatory soon field methods present series. detectability species indeed strongly dependent survey method species preferred field method, one assumed provide estimates closer truth. , even series homogeneous relative field method, recommended provide column field_method counts collected preferred field method. force conversion towards preferred field method.","code":""},{"path":"https://frbcesab.github.io/popbayes/articles/popbayes.html","id":"count-conversion","dir":"Articles","previous_headings":"The Garamba dataset","what":"Count conversion","title":"Get started","text":"function format_data() convert counts (95% CI bounds) equivalent preferred field method species. aim, two pieces information required : pref_field_method: preferred field method species (G); conversion_A2G: multiplicative factor used convert aerial count equivalent ground count. package popbayes provides species_info dataset, contains two pieces information 15 African mammal species.   Species count conversion information popbayes  users work species table, package popbayes can automatically retrieve values pref_field_method conversion_A2G species_info data set. species, users need supply information running format_data(). values may provided additional fields count data set. Care must taken value consistently repeated count species. users sufficient command R, recommend rather create independent additional table similar species_info pass function format_data() data frame argument info. Note: Currently format_data() takes information count conversion one source priority given info, additional fields data (info provided), eventually species_info table package (two sources lacking). means source highest priority must complete respect species present data, used exclusively source. , say, use info, expect format_data() retrieve conversion information species undocumented info species_info table package. However, can easily construct info copy species_info, additionally provides ready template. suffices add species already species_info shown . Let’s assume , addition species present package species_info table, counts Taurotragus oryx Taurotragus derbianus. can construct info follows.   conversion information new species, can rely conversion information species similar characteristics (example two Taurotragus species belong category LLB). package popbayes distinguishes five categories species: MLB: Medium-sized Light Brown species (20-150kg) LLB: Large Light Brown species (>150kg) LD: Large Dark (>150kg) Elephant Giraffe field category species_info table indicates species belong .","code":"data(\"species_info\") ## Extract the relevant columns of the package table \"species_info\" ---- info_from_package <- species_info[ , c(\"species\", \"pref_field_method\", \"conversion_A2G\", \"rmax\")]  ## Add the new species ---- new_conversion_info <- data.frame(\"species\"           = c(\"Taurotragus oryx\",\"Taurotragus derbianus\"),                                   \"pref_field_method\" = \"G\",                                   \"conversion_A2G\"    = 2.302,                                   \"rmax\"              = 0.1500)  ## Append the new species ---- info <- rbind(info_from_package, new_conversion_info) info #>                   species pref_field_method conversion_A2G   rmax #> 1      Aepyceros melampus                 G          6.747 0.4010 #> 2   Alcelaphus buselaphus                 G          2.302 0.2748 #> 3   Connochaetes taurinus                 G          2.302 0.2679 #> 4      Damaliscus lunatus                 G          6.747 0.2990 #> 5      Eudorcas rufifrons                 G          6.747 0.5270 #> 6  Giraffa camelopardalis                 A          3.011 0.1750 #> 7     Hippotragus equinus                 G          2.302 0.2420 #> 8    Kobus ellipsiprymnus                 G          6.747 0.2702 #> 9               Kobus kob                 G          6.747 0.3802 #> 10     Loxodonta africana                 A          0.659 0.1120 #> 11         Ourebia ourebi                 G          6.747 0.5988 #> 12        Redunca redunca                 G          6.747 0.4010 #> 13        Syncerus caffer                 A          0.561 0.2080 #> 14  Tragelaphus derbianus                 G          2.302 0.1500 #> 15   Tragelaphus scriptus                 G          6.747 0.4487 #> 16       Taurotragus oryx                 G          2.302 0.1500 #> 17  Taurotragus derbianus                 G          2.302 0.1500"},{"path":"https://frbcesab.github.io/popbayes/articles/popbayes.html","id":"relative-rate-of-increase","dir":"Articles","previous_headings":"The Garamba dataset","what":"Relative rate of increase","title":"Get started","text":"demographic potential species limited. intrinsic rate increase (called rmax) maximum increase log population size species can attain year. strongly recommend using rmax values estimating population trend limit yearly population growth estimated model (default).  pref_field_method conversion_A2G, rmax values (specific species) can provided additional field count dataset (garamba), additional field info data frame, internally can retrieved internal dataset popbayes.  find species rmax value? According Sinclair (2003), rmax related body mass adult females W formula: \\[ rmax = 1.375 \\times W^{-0.315} \\] Body masses found literature publications Kingdon & Hoffman (2013), Cornelis et al. (2014), Illius & Gordon (1992), Sinclair (1996), Suraud et al. (2012), Foley & Faust (2010). know body mass adult females species, can compute rmax value function w_to_rmax().  Alternatively, rmax can obtained previous demographic analyses.  Important note: intrinsic rate increase refers change one year. different time unit used dates (say month), rmax provide must adapted (divided 12). rmax values popbayes used time units one year.","code":""},{"path":"https://frbcesab.github.io/popbayes/articles/popbayes.html","id":"checking-data","dir":"Articles","previous_headings":"","what":"Checking data","title":"Get started","text":"first thing function format_data() check validity content different fields count data set. explore data avoid errors using function format_data(). particular, need check location species spelling, date count field format, stat_method field_method categories.  Check location field Field location can either character factor. contain NA values.  Check species field Field species can either character factor. contain NA values.  Check date field Field date must numeric. contain NA values. said, time unit arbitrary, fractional values years (another unit) allowed. long numeric values entered, package work.  hand, date format (e.g. ‘2021/05/19’), need convert numeric format. instance: methods exist convert date numeric format. may prefer computing number days since first date survey. ’s .  Check count field Field count must positive numeric (zero counts allowed). NA counts used fitting trends. format_data() function (see ) option dropping .  Check stat_method field Field stat_method can either character factor. must contain T, X, S categories contain NA values.  Check field_method field Field field_method can either character factor. must contain , G categories contain NA values.","code":"unique(garamba$\"location\") #> [1] \"Garamba\"  sum(is.na(garamba$\"location\"))   # Are there any missing values? #> [1] 0 unique(garamba$\"species\") #>  [1] \"Alcelaphus buselaphus\"  \"Giraffa camelopardalis\" \"Hippotragus equinus\"    #>  [4] \"Kobus ellipsiprymnus\"   \"Kobus kob\"              \"Loxodonta africana\"     #>  [7] \"Ourebia ourebi\"         \"Redunca redunca\"        \"Syncerus caffer\"        #> [10] \"Tragelaphus scriptus\"  sum(is.na(garamba$\"species\"))   # Are there any missing values? #> [1] 0  ## Are there species absent from the 'species_info' popbayes dataset? garamba_species <- unique(garamba$\"species\") garamba_species[which(!(garamba_species %in% species_info$\"species\"))] #> character(0) is.numeric(garamba$\"date\")     # Are dates in a numerical format? #> [1] TRUE  sum(is.na(garamba$\"date\"))     # Are there any missing values? #> [1] 0  range(garamba$\"date\")          # What is the temporal extent? #> [1] 1976 2017 ## Convert a character to a date object ---- x <- as.Date(\"2021/05/19\") x #> [1] \"2021-05-19\"  ## Convert a date to a numeric (number of days since 1970/01/01) ---- x <- as.numeric(x) x #> [1] 18766  ## Check ---- as.Date(x, origin = as.Date(\"1970/01/01\")) #> [1] \"2021-05-19\" is.numeric(garamba$\"count\")   # Are counts in a numerical format? #> [1] TRUE  range(garamba$\"count\")        # What is the range of values? #> [1]     0 53312  sum(is.na(garamba$\"count\"))   # Are there any missing values? #> [1] 0 unique(garamba$\"stat_method\") #> [1] \"S\" \"T\"  sum(is.na(garamba$\"stat_method\"))   # Are there any missing values? #> [1] 0 unique(garamba$\"field_method\") #> [1] \"A\"  sum(is.na(garamba$\"field_method\"))   # Are there any missing values? #> [1] 0"},{"path":"https://frbcesab.github.io/popbayes/articles/popbayes.html","id":"formatting-data","dir":"Articles","previous_headings":"","what":"Formatting data","title":"Get started","text":"first popbayes function use format_data(). function provides easy way get individual count series ready analyzed package. must used prior functions.  First let’s define path (relative absolute) save objects/results, namely formatted count series can extracted data set.  function format_data() many arguments provide names columns user’s dataset contain location, species, lower_ci, etc. default column names Garamba dataset. location field, say, “site”, ’ll need use argument location follows: location = \"site\".   said , add count conversion data, need specify names columns preferred field method, conversion factor, rmax : pref_field_method = \"column_with_preferred_field_method\", conversion_A2G = \"column_with_conversion_A2Gor\", rmax = \"column_with_conversion_rmax\", alternatively use argument info: info = \"dataframe_with_conversion_info\".  Let’s explore output.  Let’s work count series \"garamba__alcelaphus_buselaphus\". can use function filter_series().  Let’s display series content.  first elements list provide summary count series. compare two last data frames (data_original data_converted), identical. function format_data() 1) computed 95% CI boundaries total counts (coded T column stat_method), 2) converted counts (CI boundaries) equivalent preferred field method (G) applying conversion factor 2.302. Bayesian model use counts precision measures data_converted data frame.  fitting population size trend can visualize count series plot_series().    function format_data() also exported count series .RData files path folder dispatched sub-folders, one per series.  *_data.RData files (count series) can imported later running function read_series().","code":"path <- \"the_folder_to_store_outputs\" garamba_formatted <- popbayes::format_data(data              = garamba,                                             path              = path,                                            field_method      = \"field_method\",                                            pref_field_method = \"pref_field_method\",                                            conversion_A2G    = \"conversion_A2G\",                                            rmax              = \"rmax\") #> ✔ Detecting 10 count series. ## Class of the object ---- class(garamba_formatted) #> [1] \"list\"  ## Number of elements (i.e. number of count series) ---- length(garamba_formatted) #> [1] 10  ## Get series names ---- popbayes::list_series(path) #>  [1] \"garamba__alcelaphus_buselaphus\"  \"garamba__giraffa_camelopardalis\" #>  [3] \"garamba__hippotragus_equinus\"    \"garamba__kobus_ellipsiprymnus\"   #>  [5] \"garamba__kobus_kob\"              \"garamba__loxodonta_africana\"     #>  [7] \"garamba__ourebia_ourebi\"         \"garamba__redunca_redunca\"        #>  [9] \"garamba__syncerus_caffer\"        \"garamba__tragelaphus_scriptus\" ## Retrieve series by species and location ---- a_buselaphus <- popbayes::filter_series(data     = garamba_formatted,                                          species  = \"Alcelaphus buselaphus\",                                         location = \"Garamba\") #> ✔ Found 1 series with \"Alcelaphus buselaphus\" and \"Garamba\". print(a_buselaphus) #> $garamba__alcelaphus_buselaphus #> $garamba__alcelaphus_buselaphus$location #> [1] \"Garamba\" #>  #> $garamba__alcelaphus_buselaphus$species #> [1] \"Alcelaphus buselaphus\" #>  #> $garamba__alcelaphus_buselaphus$dates #>  [1] 1976 1983 1984 1986 1991 1993 1995 1998 2000 2002 2003 2004 2012 2014 2017 #>  #> $garamba__alcelaphus_buselaphus$n_dates #> [1] 15 #>  #> $garamba__alcelaphus_buselaphus$stat_methods #> [1] \"S\" \"T\" #>  #> $garamba__alcelaphus_buselaphus$field_methods #> [1] \"A\" #>  #> $garamba__alcelaphus_buselaphus$pref_field_method #> [1] \"G\" #>  #> $garamba__alcelaphus_buselaphus$conversion_A2G #> [1] 2.302 #>  #> $garamba__alcelaphus_buselaphus$rmax #> [1] 0.2748 #>  #> $garamba__alcelaphus_buselaphus$data_original #>    location               species date stat_method field_method #> 1   Garamba Alcelaphus buselaphus 1976           S            A #> 2   Garamba Alcelaphus buselaphus 1983           S            A #> 3   Garamba Alcelaphus buselaphus 1984           S            A #> 4   Garamba Alcelaphus buselaphus 1986           S            A #> 5   Garamba Alcelaphus buselaphus 1991           S            A #> 6   Garamba Alcelaphus buselaphus 1993           S            A #> 7   Garamba Alcelaphus buselaphus 1995           S            A #> 8   Garamba Alcelaphus buselaphus 1998           S            A #> 9   Garamba Alcelaphus buselaphus 2000           S            A #> 10  Garamba Alcelaphus buselaphus 2002           S            A #> 11  Garamba Alcelaphus buselaphus 2003           S            A #> 12  Garamba Alcelaphus buselaphus 2004           S            A #> 13  Garamba Alcelaphus buselaphus 2012           T            A #> 14  Garamba Alcelaphus buselaphus 2014           T            A #> 15  Garamba Alcelaphus buselaphus 2017           T            A #>    pref_field_method conversion_A2G   rmax count_orig lower_ci_orig #> 1                  G          2.302 0.2748       7750          6280 #> 2                  G          2.302 0.2748       1932          1120 #> 3                  G          2.302 0.2748       1224           782 #> 4                  G          2.302 0.2748       1705          1116 #> 5                  G          2.302 0.2748        987           663 #> 6                  G          2.302 0.2748       3444          1290 #> 7                  G          2.302 0.2748       2819          1620 #> 8                  G          2.302 0.2748       1685          1287 #> 9                  G          2.302 0.2748       1169           945 #> 10                 G          2.302 0.2748       1139           907 #> 11                 G          2.302 0.2748       1595          1142 #> 12                 G          2.302 0.2748       1204           811 #> 13                 G          2.302 0.2748        552            NA #> 14                 G          2.302 0.2748        698            NA #> 15                 G          2.302 0.2748       1051            NA #>    upper_ci_orig #> 1           9220 #> 2           2744 #> 3           1666 #> 4           2294 #> 5           1311 #> 6           5598 #> 7           4018 #> 8           2083 #> 9           1393 #> 10          1371 #> 11          2048 #> 12          1597 #> 13            NA #> 14            NA #> 15            NA #>  #> $garamba__alcelaphus_buselaphus$data_converted #>    location               species date stat_method field_method #> 1   Garamba Alcelaphus buselaphus 1976           S            A #> 2   Garamba Alcelaphus buselaphus 1983           S            A #> 3   Garamba Alcelaphus buselaphus 1984           S            A #> 4   Garamba Alcelaphus buselaphus 1986           S            A #> 5   Garamba Alcelaphus buselaphus 1991           S            A #> 6   Garamba Alcelaphus buselaphus 1993           S            A #> 7   Garamba Alcelaphus buselaphus 1995           S            A #> 8   Garamba Alcelaphus buselaphus 1998           S            A #> 9   Garamba Alcelaphus buselaphus 2000           S            A #> 10  Garamba Alcelaphus buselaphus 2002           S            A #> 11  Garamba Alcelaphus buselaphus 2003           S            A #> 12  Garamba Alcelaphus buselaphus 2004           S            A #> 13  Garamba Alcelaphus buselaphus 2012           T            A #> 14  Garamba Alcelaphus buselaphus 2014           T            A #> 15  Garamba Alcelaphus buselaphus 2017           T            A #>    pref_field_method conversion_A2G   rmax count_conv lower_ci_conv #> 1                  G          2.302 0.2748  17840.500     14456.560 #> 2                  G          2.302 0.2748   4447.464      2578.240 #> 3                  G          2.302 0.2748   2817.648      1800.164 #> 4                  G          2.302 0.2748   3924.910      2569.032 #> 5                  G          2.302 0.2748   2272.074      1526.226 #> 6                  G          2.302 0.2748   7928.088      2969.580 #> 7                  G          2.302 0.2748   6489.338      3729.240 #> 8                  G          2.302 0.2748   3878.870      2962.674 #> 9                  G          2.302 0.2748   2691.038      2175.390 #> 10                 G          2.302 0.2748   2621.978      2087.914 #> 11                 G          2.302 0.2748   3671.690      2628.884 #> 12                 G          2.302 0.2748   2771.608      1866.922 #> 13                 G          2.302 0.2748   1270.704      1207.169 #> 14                 G          2.302 0.2748   1606.796      1526.456 #> 15                 G          2.302 0.2748   2419.402      2298.432 #>    upper_ci_conv field_method_conv #> 1      21224.440                 G #> 2       6316.688                 G #> 3       3835.132                 G #> 4       5280.788                 G #> 5       3017.922                 G #> 6      12886.596                 G #> 7       9249.436                 G #> 8       4795.066                 G #> 9       3206.686                 G #> 10      3156.042                 G #> 11      4714.496                 G #> 12      3676.294                 G #> 13      1524.845                 G #> 14      1928.155                 G #> 15      2903.282                 G popbayes::plot_series(\"garamba__alcelaphus_buselaphus\", path = path) list.files(path, recursive = TRUE) #>  [1] \"garamba__alcelaphus_buselaphus/garamba__alcelaphus_buselaphus_data.RData\"   #>  [2] \"garamba__giraffa_camelopardalis/garamba__giraffa_camelopardalis_data.RData\" #>  [3] \"garamba__hippotragus_equinus/garamba__hippotragus_equinus_data.RData\"       #>  [4] \"garamba__kobus_ellipsiprymnus/garamba__kobus_ellipsiprymnus_data.RData\"     #>  [5] \"garamba__kobus_kob/garamba__kobus_kob_data.RData\"                           #>  [6] \"garamba__loxodonta_africana/garamba__loxodonta_africana_data.RData\"         #>  [7] \"garamba__ourebia_ourebi/garamba__ourebia_ourebi_data.RData\"                 #>  [8] \"garamba__redunca_redunca/garamba__redunca_redunca_data.RData\"               #>  [9] \"garamba__syncerus_caffer/garamba__syncerus_caffer_data.RData\"               #> [10] \"garamba__tragelaphus_scriptus/garamba__tragelaphus_scriptus_data.RData\" a_buselaphus <- popbayes::read_series(\"garamba__alcelaphus_buselaphus\", path = path)"},{"path":"https://frbcesab.github.io/popbayes/articles/popbayes.html","id":"fitting-trend","dir":"Articles","previous_headings":"","what":"Fitting trend","title":"Get started","text":"function fit_trend() fits population trajectories time counts individuals formatted format_data(). Bayesian framework primary quantity modeled annual rate increase (generally, rate increase per time unit used dates). function works output format_data() (filter_series()). default usage function fit_trend():   function returns n-element list (n number count series). element list BUGS output provided JAGS. also exported BUGS outputs .RData files path folder dispatched sub-folders, one per series.  *_bugs.RData files (BUGS outputs) can imported later running function read_bugs().  function diagnostic() allows check estimation parameters model converged. diagnostic performed comparing Rhat value parameter threshold (default 1.1).  case convergence reached series, suggest rerunning fit_trend() series increasing number iterations (ni) possibly number initial iterations discarded (nb) respective defaults 50,000 10,000. example: process may repeated increasing values ni nb convergence eventually reached.  Finally can use function plot_trend() visualize model predictions estimated yearly relative growth rates.","code":"a_buselaphus_bugs <- popbayes::fit_trend(a_buselaphus, path = path) a_buselaphus_bugs <- popbayes::read_bugs(\"garamba__alcelaphus_buselaphus\", path = path) popbayes::diagnostic(a_buselaphus_bugs) #> All models have converged. a_buselaphus_bugs <- popbayes::fit_trend(a_buselaphus, path = path, ni = 100000, nb = 20000) popbayes::plot_trend(\"garamba__alcelaphus_buselaphus\", path = path)"},{"path":"https://frbcesab.github.io/popbayes/articles/popbayes.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Get started","text":"Cornelis D et al. (2014) Species account: African buffalo (Syncerus caffer). : Ecology, Evolution Behaviour Wild Cattle: Implications Conservation (Eds M Melletti & J Burton). Cambridge University Press, Cambridge. DOI: 10.1017/CBO9781139568098. Foley CAH & Faust LJ (2010) Rapid population growth elephant Loxodonta africana population recovering poaching Tarangire National Park, Tanzania. Oryx, 44, 205-212. DOI: 10.1017/S0030605309990706. Illius AW & Gordon IJ (1992) Modelling nutritional ecology ungulate herbivores: evolution body size competitive interactions. Oecologia, 89, 428-434. DOI: 10.1017/S0030605309990706. Kingdon J & Hoffman M (2013) Mammals Africa. Volume VI: Pigs, Hippopotamuses, Chevrotain, Giraffes, Deer Bovids. Bloomsbury Publishing, London, United Kingdom, 680 pp. Sinclair (1996) Mammal populations: fluctuation, regulation, life history theory, implications conservation. : Frontiers population ecology (Eds RB Floyd & AW Sheppard), pp. 127-154. CSIRO: Melbourne, Australia. Sinclair (2003) Mammal population regulation, keystone processes ecosystem dynamics. Philosophical Transactions: Biological Sciences, 358, 1729-1740. DOI: 10.1098/rstb.2003.1359. Suraud JP et al. (2012) Higher expected growth rate endangered West African giraffe Giraffa camelopardalis peralta: successful human-wildlife cohabitation. Oryx, 46, 577-583. DOI: 10.1017/S0030605311000639.","code":""},{"path":"https://frbcesab.github.io/popbayes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas Casajus. Author, maintainer, copyright holder. Roger Pradel. Author.","code":""},{"path":"https://frbcesab.github.io/popbayes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Casajus Nicolas, Pradel Roger (2023). popbayes: Bayesian model estimate population trends counts series. R package version 1.2.0, https://frbcesab.github.io/popbayes/.","code":"@Manual{,   title = {popbayes: Bayesian model to estimate population trends from counts series},   author = {{Casajus Nicolas} and {Pradel Roger}},   year = {2023},   note = {R package version 1.2.0},   url = {https://frbcesab.github.io/popbayes/}, }"},{"path":"https://frbcesab.github.io/popbayes/index.html","id":"popbayes-","dir":"","previous_headings":"","what":"Bayesian Model to Estimate Population Trends from Counts Series","title":"Bayesian Model to Estimate Population Trends from Counts Series","text":"goal R package popbayes infer trends one several populations time series counts. accounting count precision (provided inferred based expert knowledge, e.g. guesstimates), smoothing population rate increase time, accounting maximum demographic potential species. Inference carried Bayesian framework. work part FRB-CESAB working group AfroBioDrivers.","code":""},{"path":"https://frbcesab.github.io/popbayes/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Model to Estimate Population Trends from Counts Series","text":"using package, users need install freeware JAGS. can install stable version package CRAN : Alternatively can install development version GitHub :","code":"install.packages(\"popbayes\") # install.packages(\"remotes\")  remotes::install_github(\"frbcesab/popbayes\", build_vignettes = TRUE)"},{"path":[]},{"path":"https://frbcesab.github.io/popbayes/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Bayesian Model to Estimate Population Trends from Counts Series","text":"Please read Get started vignette.","code":""},{"path":"https://frbcesab.github.io/popbayes/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Bayesian Model to Estimate Population Trends from Counts Series","text":"Please cite package : Casajus N. & Pradel R. (2023) popbayes: Bayesian model estimate population trends counts series. R package version 1.2.0. URL: https://frbcesab.github.io/popbayes/. can also run:","code":"citation(\"popbayes\")  ## A BibTeX entry for LaTeX users is: ##  ## @Manual{, ##   title  = {{popbayes}: {B}ayesian model to estimate population trends from counts series, ##   author = {{Casajus N.}, and {Pradel R.}}, ##   year   = {2023}, ##   note   = {R package version 1.2.0}, ##   url    = {https://frbcesab.github.io/popbayes/}, ## }"},{"path":"https://frbcesab.github.io/popbayes/reference/bugs_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract estimated parameters from a list of BUGS outputs — bugs_to_df","title":"Extract estimated parameters from a list of BUGS outputs — bugs_to_df","text":"output function fit_trend() (read_bugs()), function extracts estimated parameters data.frame. resulting data.frame particular use popbayes can useful users.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/bugs_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract estimated parameters from a list of BUGS outputs — bugs_to_df","text":"","code":"bugs_to_df(data)"},{"path":"https://frbcesab.github.io/popbayes/reference/bugs_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract estimated parameters from a list of BUGS outputs — bugs_to_df","text":"data named list BUGS outputs. output fit_trend() read_bugs()","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/bugs_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract estimated parameters from a list of BUGS outputs — bugs_to_df","text":"data.frame.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/bugs_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract estimated parameters from a list of BUGS outputs — bugs_to_df","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.                                          ## Select one serie ---- a_buselaphus <- popbayes::filter_series(garamba_formatted,                                          location = \"Garamba\",                                         species  = \"Alcelaphus buselaphus\") #> ✔ Found 1 series with \"Alcelaphus buselaphus\" and \"Garamba\". # \\donttest{ ## Fit population trends (requires JAGS) ---- a_buselaphus_mod <- popbayes::fit_trend(a_buselaphus, path = temp_path) #> module glm loaded #> Compiling data graph #>    Resolving undeclared variables #>    Allocating nodes #>    Initializing #>    Reading data back into data table #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 15 #>    Unobserved stochastic nodes: 15 #>    Total graph size: 227 #>  #> Initializing model #>   ## Import BUGS outputs for one count series ---- bugs <- popbayes::read_bugs(series = \"garamba__alcelaphus_buselaphus\",                              path   = temp_path)  ## Extract estimated parameters ---- popbayes::bugs_to_df(bugs) #>                            series parameter          mean           sd #> 1  garamba__alcelaphus_buselaphus      N[1]  1.772100e+04 1.729775e+03 #> 2  garamba__alcelaphus_buselaphus      N[2]  3.850141e+03 4.973625e+02 #> 3  garamba__alcelaphus_buselaphus      N[3]  3.309152e+03 3.905891e+02 #> 4  garamba__alcelaphus_buselaphus      N[4]  2.998527e+03 4.323555e+02 #> 5  garamba__alcelaphus_buselaphus      N[5]  2.678312e+03 3.307934e+02 #> 6  garamba__alcelaphus_buselaphus      N[6]  3.233291e+03 5.526038e+02 #> 7  garamba__alcelaphus_buselaphus      N[7]  3.765074e+03 6.764909e+02 #> 8  garamba__alcelaphus_buselaphus      N[8]  3.472602e+03 3.705043e+02 #> 9  garamba__alcelaphus_buselaphus      N[9]  2.888552e+03 2.072682e+02 #> 10 garamba__alcelaphus_buselaphus     N[10]  2.748165e+03 2.034497e+02 #> 11 garamba__alcelaphus_buselaphus     N[11]  2.752900e+03 2.580135e+02 #> 12 garamba__alcelaphus_buselaphus     N[12]  2.625408e+03 2.982512e+02 #> 13 garamba__alcelaphus_buselaphus     N[13]  1.311394e+03 7.328570e+01 #> 14 garamba__alcelaphus_buselaphus     N[14]  1.571261e+03 9.053393e+01 #> 15 garamba__alcelaphus_buselaphus     N[15]  2.394501e+03 1.539111e+02 #> 16 garamba__alcelaphus_buselaphus  deviance  2.362347e+02 5.165043e+00 #> 17 garamba__alcelaphus_buselaphus     meanr -4.875138e-02 2.885809e-03 #> 18 garamba__alcelaphus_buselaphus      r[1] -2.186147e-01 2.270729e-02 #> 19 garamba__alcelaphus_buselaphus      r[2] -1.500121e-01 6.877398e-02 #> 20 garamba__alcelaphus_buselaphus      r[3] -5.099129e-02 6.069916e-02 #> 21 garamba__alcelaphus_buselaphus      r[4] -2.204245e-02 3.392850e-02 #> 22 garamba__alcelaphus_buselaphus      r[5]  9.074184e-02 6.432717e-02 #> 23 garamba__alcelaphus_buselaphus      r[6]  7.540158e-02 5.851457e-02 #> 24 garamba__alcelaphus_buselaphus      r[7] -2.350364e-02 5.097567e-02 #> 25 garamba__alcelaphus_buselaphus      r[8] -9.050151e-02 5.096770e-02 #> 26 garamba__alcelaphus_buselaphus      r[9] -2.499481e-02 4.316500e-02 #> 27 garamba__alcelaphus_buselaphus     r[10]  5.962291e-05 6.665749e-02 #> 28 garamba__alcelaphus_buselaphus     r[11] -4.950209e-02 6.553757e-02 #> 29 garamba__alcelaphus_buselaphus     r[12] -8.615151e-02 1.541633e-02 #> 30 garamba__alcelaphus_buselaphus     r[13]  9.034500e-02 3.563934e-02 #> 31 garamba__alcelaphus_buselaphus     r[14]  1.402948e-01 2.779964e-02 #> 32 garamba__alcelaphus_buselaphus       sdr  1.122059e-01 9.657620e-03 #> 33 garamba__alcelaphus_buselaphus    vrrmax  4.621535e-01 3.977778e-02 #>             2.5%           25%           50%           75%         97.5% #> 1   1.431631e+04  1.655658e+04  1.772194e+04  1.888266e+04  2.110299e+04 #> 2   2.888981e+03  3.509654e+03  3.847487e+03  4.180559e+03  4.834674e+03 #> 3   2.550177e+03  3.042992e+03  3.309741e+03  3.573129e+03  4.072483e+03 #> 4   2.195827e+03  2.698451e+03  2.982672e+03  3.280820e+03  3.887447e+03 #> 5   2.033679e+03  2.450529e+03  2.677881e+03  2.904399e+03  3.324855e+03 #> 6   2.234661e+03  2.841034e+03  3.203521e+03  3.583267e+03  4.414243e+03 #> 7   2.583617e+03  3.282852e+03  3.721283e+03  4.190219e+03  5.220882e+03 #> 8   2.774144e+03  3.215877e+03  3.464590e+03  3.721169e+03  4.215468e+03 #> 9   2.487402e+03  2.746939e+03  2.887398e+03  3.027517e+03  3.300742e+03 #> 10  2.354293e+03  2.609529e+03  2.746285e+03  2.885595e+03  3.145791e+03 #> 11  2.259670e+03  2.576350e+03  2.747009e+03  2.927198e+03  3.267404e+03 #> 12  2.058893e+03  2.419733e+03  2.619069e+03  2.822791e+03  3.229276e+03 #> 13  1.169513e+03  1.261833e+03  1.310949e+03  1.361339e+03  1.455309e+03 #> 14  1.395993e+03  1.510320e+03  1.570637e+03  1.631658e+03  1.752060e+03 #> 15  2.094380e+03  2.290871e+03  2.393927e+03  2.498309e+03  2.696495e+03 #> 16  2.273803e+02  2.326268e+02  2.357662e+02  2.393482e+02  2.476382e+02 #> 17 -5.417675e-02 -5.071391e-02 -4.881654e-02 -4.688358e-02 -4.284532e-02 #> 18 -2.643631e-01 -2.335204e-01 -2.181308e-01 -2.035562e-01 -1.739981e-01 #> 19 -2.840044e-01 -1.966724e-01 -1.502095e-01 -1.037954e-01 -1.386374e-02 #> 20 -1.686733e-01 -9.192219e-02 -5.164791e-02 -1.002543e-02  6.891448e-02 #> 21 -8.773795e-02 -4.476381e-02 -2.245801e-02  3.076995e-04  4.682962e-02 #> 22 -3.326142e-02  4.651487e-02  9.047525e-02  1.342468e-01  2.222861e-01 #> 23 -3.663444e-02  3.581146e-02  7.492059e-02  1.140134e-01  1.938999e-01 #> 24 -1.225695e-01 -5.760341e-02 -2.414298e-02  9.806327e-03  7.841485e-02 #> 25 -1.880805e-01 -1.252855e-01 -9.160568e-02 -5.617282e-02  1.119226e-02 #> 26 -1.097735e-01 -5.432977e-02 -2.501886e-02  4.182605e-03  6.042202e-02 #> 27 -1.309067e-01 -4.508699e-02  3.956121e-04  4.575904e-02  1.280129e-01 #> 28 -1.791352e-01 -9.338575e-02 -4.914100e-02 -5.119069e-03  7.850645e-02 #> 29 -1.155664e-01 -9.653620e-02 -8.644329e-02 -7.610274e-02 -5.473144e-02 #> 30  2.001179e-02  6.653616e-02  9.037790e-02  1.141177e-01  1.597086e-01 #> 31  8.434997e-02  1.217361e-01  1.405392e-01  1.589559e-01  1.941114e-01 #> 32  9.409520e-02  1.056223e-01  1.117709e-01  1.185014e-01  1.322428e-01 #> 33  3.875591e-01  4.350368e-01  4.603616e-01  4.880831e-01  5.446815e-01 #>        Rhat n.eff #> 1  1.001631  2200 #> 2  1.001109 10000 #> 3  1.001016 27000 #> 4  1.000970 27000 #> 5  1.000962 27000 #> 6  1.001053 16000 #> 7  1.002393  1000 #> 8  1.000988 27000 #> 9  1.001137  8500 #> 10 1.001087 12000 #> 11 1.001677  2100 #> 12 1.002717   860 #> 13 1.000967 27000 #> 14 1.001001 27000 #> 15 1.001032 21000 #> 16 1.002141  1300 #> 17 1.001651  2200 #> 18 1.001647  2200 #> 19 1.001066 14000 #> 20 1.000975 27000 #> 21 1.000972 27000 #> 22 1.001151  7900 #> 23 1.002909   770 #> 24 1.003283   650 #> 25 1.000976 27000 #> 26 1.001392  3500 #> 27 1.001601  2300 #> 28 1.002164  1200 #> 29 1.002384  1100 #> 30 1.001011 27000 #> 31 1.001065 14000 #> 32 1.000967 27000 #> 33 1.000967 27000 # }"},{"path":"https://frbcesab.github.io/popbayes/reference/diagnostic.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a BUGS model has converged — diagnostic","title":"Check if a BUGS model has converged — diagnostic","text":"output function fit_trend() (read_bugs()), function checks estimation parameters one (several) BUGS model converged. diagnostic performed comparing Rhat value parameter threshold (default 1.1). Rhat values greater threshold (convergence), message listing problematic models displayed.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/diagnostic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a BUGS model has converged — diagnostic","text":"","code":"diagnostic(data, threshold = 1.1)"},{"path":"https://frbcesab.github.io/popbayes/reference/diagnostic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a BUGS model has converged — diagnostic","text":"data named list BUGS outputs. output fit_trend() read_bugs(). threshold numeric.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/diagnostic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a BUGS model has converged — diagnostic","text":"return value.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/diagnostic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a BUGS model has converged — diagnostic","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.                                          ## Select one serie ---- a_buselaphus <- popbayes::filter_series(garamba_formatted,                                          location = \"Garamba\",                                         species  = \"Alcelaphus buselaphus\") #> ✔ Found 1 series with \"Alcelaphus buselaphus\" and \"Garamba\". # \\donttest{ ## Fit population trends (requires JAGS) ---- a_buselaphus_mod <- popbayes::fit_trend(a_buselaphus, path = temp_path) #> Compiling data graph #>    Resolving undeclared variables #>    Allocating nodes #>    Initializing #>    Reading data back into data table #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 15 #>    Unobserved stochastic nodes: 15 #>    Total graph size: 227 #>  #> Initializing model #>   ## Check for convergence ---- popbayes::diagnostic(a_buselaphus_mod) #> ✔ All models have converged. # }"},{"path":"https://frbcesab.github.io/popbayes/reference/filter_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the count series corresponding to a location and/or a species — filter_series","title":"Extract the count series corresponding to a location and/or a species — filter_series","text":"function identifies count series relative species /location named list like output function format_data(). species location provided, series counts species specified location extracted. Otherwise, series corresponding specified criterion (species location) extracted.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/filter_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the count series corresponding to a location and/or a species — filter_series","text":"","code":"filter_series(data, species = NULL, location = NULL)"},{"path":"https://frbcesab.github.io/popbayes/reference/filter_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the count series corresponding to a location and/or a species — filter_series","text":"data named list. output function format_data(). species character string. species name. location character string. site name.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/filter_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the count series corresponding to a location and/or a species — filter_series","text":"subset data, .e. named list.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/filter_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the count series corresponding to a location and/or a species — filter_series","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.  ## Number of count series ---- length(garamba_formatted) #> [1] 10  ## Retrieve count series names ---- popbayes::list_series(path = temp_path) #>  [1] \"garamba__alcelaphus_buselaphus\"  \"garamba__giraffa_camelopardalis\" #>  [3] \"garamba__hippotragus_equinus\"    \"garamba__kobus_ellipsiprymnus\"   #>  [5] \"garamba__kobus_kob\"              \"garamba__loxodonta_africana\"     #>  [7] \"garamba__ourebia_ourebi\"         \"garamba__redunca_redunca\"        #>  [9] \"garamba__syncerus_caffer\"        \"garamba__tragelaphus_scriptus\"    ## Get data for Alcelaphus buselaphus (at all sites) ---- x <- popbayes::filter_series(garamba_formatted,                               species = \"Alcelaphus buselaphus\") #> ✔ Found 1 series with \"Alcelaphus buselaphus\".  ## Get data at Garamba (for all species) ---- x <- popbayes::filter_series(garamba_formatted,                               location = \"Garamba\") #> ✔ Found 10 series with \"Garamba\".  ## Get data for Alcelaphus buselaphus at Garamba only ---- x <- popbayes::filter_series(garamba_formatted,                               location = \"Garamba\",                              species  = \"Alcelaphus buselaphus\") #> ✔ Found 1 series with \"Alcelaphus buselaphus\" and \"Garamba\"."},{"path":"https://frbcesab.github.io/popbayes/reference/fit_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Bayesian model to estimate population size trend — fit_trend","title":"Fit a Bayesian model to estimate population size trend — fit_trend","text":"function applies Bayesian model count series order infer population trend time. function works output format_data() filter_series(). Important: function uses R2jags::jags() freeware JAGS (https://mcmc-jags.sourceforge.io/) must installed. two types options: model options (argument model_opts) MCMC options (argument mcmc_opts). . Model options smoothing factor: precision (inverse variance) normal distribution centered current relative rate increase r next candidate relative rate increase (see ) drawn. highest number, tighter link successive relative rates increase. default 100 corresponds moderate link. logical indicating whether population growth must remain limited species demographic potential (provided argument rmax format_data()). relative rate increase change log population size two dates. quantity actually modeled relative rate increase per unit time (usually one date). quantity reflects directly prevailing conditions population size , reason chosen. second model option set TRUE, candidate rate increase compared maximum relative rate increase (obtained using format_data()) replaced rmax greater. B. MCMC options Classical Markov chain Monte Carlo (MCMC) settings (see argument mcmc_opts ).","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/fit_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Bayesian model to estimate population size trend — fit_trend","text":"","code":"fit_trend(   data,   model_opts = list(100, TRUE),   mcmc_opts = list(ni = 50000, nt = 3, nb = 10000, nc = 2),   path = \".\" )"},{"path":"https://frbcesab.github.io/popbayes/reference/fit_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Bayesian model to estimate population size trend — fit_trend","text":"data named list. output format_data() filter_series(). model_opts list two vectors. model smoothing factor (numeric) logical indicating parameter r must limited rmax (TRUE) (FALSE). second parameter TRUE, argument rmax NULL unless species listed popbayes (species_info). mcmc_opts list containing number iterations (ni), thinning factor (nt), length burn (nb), .e. number iterations discard beginning, number chains (nc). path character string. directory save BUGS outputs (format_data()).","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/fit_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Bayesian model to estimate population size trend — fit_trend","text":"n-element list (n number count series). element list BUGS output provided JAGS (also written folder path).","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/fit_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Bayesian model to estimate population size trend — fit_trend","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.  ## Get data for Alcelaphus buselaphus at Garamba only ---- a_buselaphus <- popbayes::filter_series(garamba_formatted,                                          location = \"Garamba\",                                         species  = \"Alcelaphus buselaphus\") #> ✔ Found 1 series with \"Alcelaphus buselaphus\" and \"Garamba\".                                          # \\donttest{ ## Fit population trend (requires JAGS) ---- a_buselaphus_mod <- popbayes::fit_trend(a_buselaphus, path = temp_path) #> Compiling data graph #>    Resolving undeclared variables #>    Allocating nodes #>    Initializing #>    Reading data back into data table #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 15 #>    Unobserved stochastic nodes: 15 #>    Total graph size: 227 #>  #> Initializing model #>   ## Check for convergence ---- popbayes::diagnostic(a_buselaphus_mod, threshold = 1.1) #> ✔ All models have converged.  ## Plot estimated population trend ---- popbayes::plot_trend(series = \"garamba__alcelaphus_buselaphus\",                       path   = temp_path)   ## Plot MCMC traceplot ---- R2jags::traceplot(a_buselaphus_mod[[1]], ask = TRUE)                                  # }"},{"path":"https://frbcesab.github.io/popbayes/reference/format_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Format count series — format_data","title":"Format count series — format_data","text":"function provides easy way get count series ready analyzed package popbayes. must used prior functions. function formats count series (passed argument data) selecting renaming columns, checking columns format content, removing missing data (na_rm = TRUE). converts original data frame list count series analyzed later function fit_trend() estimate population trends. usable estimation population trends, counts must accompanied information precision. population trend model requires 95% confident interval (CI). estimates total counts guesstimates, function construct boundaries 95% CI applying rules set https://frbcesab.github.io/popbayes/articles/popbayes.html. counts estimated sampling method user needs specify measure precision. Precision preferably provided form 95% CI means two fields: lower_ci upper_ci. may also given form standard deviation (sd), variance (var), coefficient variation (cv). fields lower_ci upper_ci absent (NA), fields sd, var, cv examined order. one found valid (missing value), 95% CI derived assuming normal distribution. field stat_method must present data indicate counts total counts ('T'), sampling ('S'), guesstimate ('X'). series mixes aerial ground counts, field field_method must also present must contain either '' (aerial counts), 'G' (ground counts). counts must eventually refer field method correct estimation trend, conversion performed homogenize counts. conversion based preferred field method conversion factor specific species/category. preferred field method specifies conversion direction. conversion factor multiplicative factor must applied aerial count get equivalent ground count (note preferred field method '', ground counts divided conversion factor get equivalent aerial count). argument rmax represents maximum change log population size two dates (.e. relative rate increase). used fit_trend() must provided function. three parameters, named pref_field_method, conversion_A2G, rmax can present data second data.frame (passed argument info). Alternatively, package popbayes provides values African large mammals. Note: field field_method absent data, counts assumed obtained one field method.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/format_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format count series — format_data","text":"","code":"format_data(   data,   info = NULL,   date = \"date\",   count = \"count\",   location = \"location\",   species = \"species\",   stat_method = \"stat_method\",   lower_ci = \"lower_ci\",   upper_ci = \"upper_ci\",   sd = NULL,   var = NULL,   cv = NULL,   field_method = NULL,   pref_field_method = NULL,   conversion_A2G = NULL,   rmax = NULL,   path = \".\",   na_rm = FALSE )"},{"path":"https://frbcesab.github.io/popbayes/reference/format_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format count series — format_data","text":"data data.frame least five columns: location, species, date, count, stat_method. stat_method field indicates method used estimate counts. can contain: T (total counts), X (guesstimate), /S (sampling). individual counts estimated sampling, additional column(s) providing measure precision also required (e.g. lower_ci upper_ci, sd, cv, var). Precision metrics can different counts. instance, sampling counts can sd value others lower_ci upper_ci. case three columns required (lower_ci, upper_ci, sd). See section Description information computation 95% confident interval estimates. individuals counted different methods, additional field field_method also required. can contain: G (ground counts) /(aerial counts). See section Description information counts conversion. Others fields can present either data info (see ). info (optional) data.frame species rows following columns: species (species name), pref_field_method, conversion_A2G, rmax. See section Description information fields. Default NULL (.e. information must present data available popbayes). date character string. column name data date. column date must numerical form possibly decimal part. Default 'date'. count character string. column name data number individuals. column must numerical. Default 'count'. location character string. column name data site. field used distinguish count series different sites (required) create unique series name. Default 'location'. species character string. column name data (info provided) species. field used distinguish count series different species (required) create unique series name. Default 'species'. stat_method character string. column name data method used estimate individuals counts. can contain 'T' (total counts), 'X' (guesstimate), /'S' (sampling). counts coded 'S', precision column(s) must also provided (see ). Default 'stat_method'. lower_ci (optional) character string. column name data lower boundary 95% CI estimate (.e. count). provided, upper boundary 95% CI (argument upper_ci) must also provided. argument required counts estimated sampling method. user may prefer use precision measures, e.g. standard deviation (argument sd), variance (argument var), coefficient variation (argument cv). Default 'lower_ci'. upper_ci (optional) character string. column name data upper boundary 95% CI estimate (.e. count). provided, lower boundary 95% CI (argument lower_ci) must also provided. Default 'upper_ci'. sd (optional) character string. column name data standard deviation estimate. Default NULL. var (optional) character string. column name data variance estimate. Default NULL. cv (optional) character string. column name data coefficient variation estimate. Default NULL. field_method (optional) character string. column name data field method used count individuals. Counts can ground counts (coded 'G') aerial counts (coded ''). argument optional individuals counted method. See section Description information count conversion. Default NULL. pref_field_method (optional) character string. column name data preferred field method species. argument required field_method NULL (.e. individuals counted different methods). Alternatively, value can passed info (internally retrieved species listed package). See section Description information count conversion. Default NULL. conversion_A2G (optional) character string. column name data count conversion factor species. argument required field_method NULL (.e. individuals counted different methods). Alternatively value can passed info (internally retrieved species listed package). See section Description information count conversion. Default NULL. rmax (optional) character string. column name data species demographic potential (.e. relative rate increase population). change log population size two dates used later fit_trend(). Default NULL. path character string. directory save formatted data. directory must exist can absolute relative path. Default current working directory. na_rm logical. TRUE, counts NA values removed. Default FALSE (returns error inform user NA detected).","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/format_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format count series — format_data","text":"n-elements list (n number count series). name element list combination location species. element list list following content: location character string. name series site. species character string. name series species. date numerical vector. sequence dates series. n_dates integer. number unique dates. stat_methods character vector. different stat methods series. field_methods (optional) character vector. different field methods series. pref_field_method (optional) character string. preferred field method species ('' 'G'). conversion_A2G (optional) numeric. conversion factor species used convert counts preferred field method. rmax numeric. maximum population growth rate species. data_original data.frame. Original data series renamed columns. rows may deleted (na_rm = TRUE). data_converted data.frame. Data containing computed boundaries 95% CI (lower_ci_conv upper_ci_conv). counts obtained different field methods, contains also converted counts (count_conv) based preferred field method conversion factor species. data.frame used function fit_trend() fit population models. Note: original series can discarded one two conditions met: 1) series contains zero counts, 2) series contains dates (< 4 dates).","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/format_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format count series — format_data","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.  ## Number of count series ---- length(garamba_formatted) #> [1] 10  ## Retrieve count series names ---- popbayes::list_series(path = temp_path) #>  [1] \"garamba__alcelaphus_buselaphus\"  \"garamba__giraffa_camelopardalis\" #>  [3] \"garamba__hippotragus_equinus\"    \"garamba__kobus_ellipsiprymnus\"   #>  [5] \"garamba__kobus_kob\"              \"garamba__loxodonta_africana\"     #>  [7] \"garamba__ourebia_ourebi\"         \"garamba__redunca_redunca\"        #>  [9] \"garamba__syncerus_caffer\"        \"garamba__tragelaphus_scriptus\"    ## Print content of the first count series ---- names(garamba_formatted[[1]]) #>  [1] \"location\"          \"species\"           \"dates\"             #>  [4] \"n_dates\"           \"stat_methods\"      \"field_methods\"     #>  [7] \"pref_field_method\" \"conversion_A2G\"    \"rmax\"              #> [10] \"data_original\"     \"data_converted\"     ## Print original data ---- garamba_formatted[[1]]$\"data_original\" #>    location               species date stat_method field_method #> 1   Garamba Alcelaphus buselaphus 1976           S            A #> 2   Garamba Alcelaphus buselaphus 1983           S            A #> 3   Garamba Alcelaphus buselaphus 1984           S            A #> 4   Garamba Alcelaphus buselaphus 1986           S            A #> 5   Garamba Alcelaphus buselaphus 1991           S            A #> 6   Garamba Alcelaphus buselaphus 1993           S            A #> 7   Garamba Alcelaphus buselaphus 1995           S            A #> 8   Garamba Alcelaphus buselaphus 1998           S            A #> 9   Garamba Alcelaphus buselaphus 2000           S            A #> 10  Garamba Alcelaphus buselaphus 2002           S            A #> 11  Garamba Alcelaphus buselaphus 2003           S            A #> 12  Garamba Alcelaphus buselaphus 2004           S            A #> 13  Garamba Alcelaphus buselaphus 2012           T            A #> 14  Garamba Alcelaphus buselaphus 2014           T            A #> 15  Garamba Alcelaphus buselaphus 2017           T            A #>    pref_field_method conversion_A2G   rmax count_orig lower_ci_orig #> 1                  G          2.302 0.2748       7750          6280 #> 2                  G          2.302 0.2748       1932          1120 #> 3                  G          2.302 0.2748       1224           782 #> 4                  G          2.302 0.2748       1705          1116 #> 5                  G          2.302 0.2748        987           663 #> 6                  G          2.302 0.2748       3444          1290 #> 7                  G          2.302 0.2748       2819          1620 #> 8                  G          2.302 0.2748       1685          1287 #> 9                  G          2.302 0.2748       1169           945 #> 10                 G          2.302 0.2748       1139           907 #> 11                 G          2.302 0.2748       1595          1142 #> 12                 G          2.302 0.2748       1204           811 #> 13                 G          2.302 0.2748        552            NA #> 14                 G          2.302 0.2748        698            NA #> 15                 G          2.302 0.2748       1051            NA #>    upper_ci_orig #> 1           9220 #> 2           2744 #> 3           1666 #> 4           2294 #> 5           1311 #> 6           5598 #> 7           4018 #> 8           2083 #> 9           1393 #> 10          1371 #> 11          2048 #> 12          1597 #> 13            NA #> 14            NA #> 15            NA  ## Print converted data ---- garamba_formatted[[1]]$\"data_converted\" #>    location               species date stat_method field_method #> 1   Garamba Alcelaphus buselaphus 1976           S            A #> 2   Garamba Alcelaphus buselaphus 1983           S            A #> 3   Garamba Alcelaphus buselaphus 1984           S            A #> 4   Garamba Alcelaphus buselaphus 1986           S            A #> 5   Garamba Alcelaphus buselaphus 1991           S            A #> 6   Garamba Alcelaphus buselaphus 1993           S            A #> 7   Garamba Alcelaphus buselaphus 1995           S            A #> 8   Garamba Alcelaphus buselaphus 1998           S            A #> 9   Garamba Alcelaphus buselaphus 2000           S            A #> 10  Garamba Alcelaphus buselaphus 2002           S            A #> 11  Garamba Alcelaphus buselaphus 2003           S            A #> 12  Garamba Alcelaphus buselaphus 2004           S            A #> 13  Garamba Alcelaphus buselaphus 2012           T            A #> 14  Garamba Alcelaphus buselaphus 2014           T            A #> 15  Garamba Alcelaphus buselaphus 2017           T            A #>    pref_field_method conversion_A2G   rmax count_conv lower_ci_conv #> 1                  G          2.302 0.2748  17840.500     14456.560 #> 2                  G          2.302 0.2748   4447.464      2578.240 #> 3                  G          2.302 0.2748   2817.648      1800.164 #> 4                  G          2.302 0.2748   3924.910      2569.032 #> 5                  G          2.302 0.2748   2272.074      1526.226 #> 6                  G          2.302 0.2748   7928.088      2969.580 #> 7                  G          2.302 0.2748   6489.338      3729.240 #> 8                  G          2.302 0.2748   3878.870      2962.674 #> 9                  G          2.302 0.2748   2691.038      2175.390 #> 10                 G          2.302 0.2748   2621.978      2087.914 #> 11                 G          2.302 0.2748   3671.690      2628.884 #> 12                 G          2.302 0.2748   2771.608      1866.922 #> 13                 G          2.302 0.2748   1270.704      1207.169 #> 14                 G          2.302 0.2748   1606.796      1526.456 #> 15                 G          2.302 0.2748   2419.402      2298.432 #>    upper_ci_conv field_method_conv #> 1      21224.440                 G #> 2       6316.688                 G #> 3       3835.132                 G #> 4       5280.788                 G #> 5       3017.922                 G #> 6      12886.596                 G #> 7       9249.436                 G #> 8       4795.066                 G #> 9       3206.686                 G #> 10      3156.042                 G #> 11      4714.496                 G #> 12      3676.294                 G #> 13      1524.845                 G #> 14      1928.155                 G #> 15      2903.282                 G"},{"path":"https://frbcesab.github.io/popbayes/reference/garamba.html","id":null,"dir":"Reference","previous_headings":"","what":"African mammals survey in the Garamba National Park — garamba","title":"African mammals survey in the Garamba National Park — garamba","text":"dataset contains individual counts 10 African mammal species Garamba National Park (Democratic Republic Congo) 1976 2017.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/garamba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"African mammals survey in the Garamba National Park — garamba","text":"","code":"garamba"},{"path":"https://frbcesab.github.io/popbayes/reference/garamba.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"African mammals survey in the Garamba National Park — garamba","text":"data.frame 141 rows (counts) following 8 variables: location location survey (Garamba) species binomial name species date date survey stat_method method used estimate individuals counts. One T (total counts), G (guesstimate), S (sampling counts) field_method field method used collect data. One (aerial counts), G (ground counts) count number individuals lower_ci lower boundary 95% confidence interval counts (sampling counts) upper_ci upper boundary 95% confidence interval counts (sampling counts) pref_field_method preferred field method species. One Aerial counts, G Ground counts conversion_A2G conversion multiplicative factor (corresponding detectability category) used convert aerial ground counts rmax maximum population growth rate","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/garamba.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"African mammals survey in the Garamba National Park — garamba","text":"Hillman Smith K & Kalpers J (2015) Garamba Conservation Peace & War. Hillman Smith publisher, 448pp. ISBN: 9789966185105. Monico M (2014) Aerial Survey Report March 2014 - Garamba National Park, DRC. African Parks Network/ICCN/Pan-African Elephant Aerial Survey, 42pp. Spies K et al. (2017) Aerial Survey Report April 2017 - Garamba National Park, DRC. African Parks Network/EU/ICCN. 38pp.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/garamba.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"African mammals survey in the Garamba National Park — garamba","text":"","code":"data(\"garamba\") head(garamba, 30) #>    location                species date stat_method field_method count lower_ci #> 1   Garamba  Alcelaphus buselaphus 1976           S            A  7750     6280 #> 2   Garamba  Alcelaphus buselaphus 1983           S            A  1932     1120 #> 3   Garamba  Alcelaphus buselaphus 1984           S            A  1224      782 #> 4   Garamba  Alcelaphus buselaphus 1986           S            A  1705     1116 #> 5   Garamba  Alcelaphus buselaphus 1991           S            A   987      663 #> 6   Garamba  Alcelaphus buselaphus 1993           S            A  3444     1290 #> 7   Garamba  Alcelaphus buselaphus 1995           S            A  2819     1620 #> 8   Garamba  Alcelaphus buselaphus 1998           S            A  1685     1287 #> 9   Garamba  Alcelaphus buselaphus 2000           S            A  1169      945 #> 10  Garamba  Alcelaphus buselaphus 2002           S            A  1139      907 #> 11  Garamba  Alcelaphus buselaphus 2003           S            A  1595     1142 #> 12  Garamba  Alcelaphus buselaphus 2004           S            A  1204      811 #> 13  Garamba  Alcelaphus buselaphus 2012           T            A   552       NA #> 14  Garamba  Alcelaphus buselaphus 2014           T            A   698       NA #> 15  Garamba  Alcelaphus buselaphus 2017           T            A  1051       NA #> 16  Garamba Giraffa camelopardalis 1976           S            A   350      100 #> 17  Garamba Giraffa camelopardalis 1983           S            A   175       12 #> 18  Garamba Giraffa camelopardalis 1984           S            A   237       93 #> 19  Garamba Giraffa camelopardalis 1986           S            A   153       13 #> 20  Garamba Giraffa camelopardalis 1991           S            A   346      143 #> 21  Garamba Giraffa camelopardalis 1993           S            A   347      347 #> 22  Garamba Giraffa camelopardalis 1995           S            A   178      178 #> 23  Garamba Giraffa camelopardalis 1998           S            A   144       71 #> 24  Garamba Giraffa camelopardalis 2000           S            A   118       54 #> 25  Garamba Giraffa camelopardalis 2002           S            A    62       49 #> 26  Garamba Giraffa camelopardalis 2003           S            A    62       62 #> 27  Garamba Giraffa camelopardalis 2004           S            A   185       33 #> 28  Garamba Giraffa camelopardalis 2012           T            A    11       NA #> 29  Garamba Giraffa camelopardalis 2014           T            A    42       NA #> 30  Garamba Giraffa camelopardalis 2017           T            A    42       NA #>    upper_ci pref_field_method conversion_A2G   rmax #> 1      9220                 G          2.302 0.2748 #> 2      2744                 G          2.302 0.2748 #> 3      1666                 G          2.302 0.2748 #> 4      2294                 G          2.302 0.2748 #> 5      1311                 G          2.302 0.2748 #> 6      5598                 G          2.302 0.2748 #> 7      4018                 G          2.302 0.2748 #> 8      2083                 G          2.302 0.2748 #> 9      1393                 G          2.302 0.2748 #> 10     1371                 G          2.302 0.2748 #> 11     2048                 G          2.302 0.2748 #> 12     1597                 G          2.302 0.2748 #> 13       NA                 G          2.302 0.2748 #> 14       NA                 G          2.302 0.2748 #> 15       NA                 G          2.302 0.2748 #> 16      600                 A          3.011 0.1750 #> 17      338                 A          3.011 0.1750 #> 18      381                 A          3.011 0.1750 #> 19      293                 A          3.011 0.1750 #> 20      549                 A          3.011 0.1750 #> 21      766                 A          3.011 0.1750 #> 22      388                 A          3.011 0.1750 #> 23      217                 A          3.011 0.1750 #> 24      182                 A          3.011 0.1750 #> 25       75                 A          3.011 0.1750 #> 26      137                 A          3.011 0.1750 #> 27      337                 A          3.011 0.1750 #> 28       NA                 A          3.011 0.1750 #> 29       NA                 A          3.011 0.1750 #> 30       NA                 A          3.011 0.1750"},{"path":"https://frbcesab.github.io/popbayes/reference/list_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the count series names — list_series","title":"Retrieve the count series names — list_series","text":"function retrieves count series names generated function format_data().","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/list_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the count series names — list_series","text":"","code":"list_series(path = \".\")"},{"path":"https://frbcesab.github.io/popbayes/reference/list_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the count series names — list_series","text":"path character string. directory count series saved function format_data().","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/list_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the count series names — list_series","text":"vector count series names (character strings).","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/list_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the count series names — list_series","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.  ## Retrieve count series names ---- popbayes::list_series(path = temp_path) #>  [1] \"garamba__alcelaphus_buselaphus\"  \"garamba__giraffa_camelopardalis\" #>  [3] \"garamba__hippotragus_equinus\"    \"garamba__kobus_ellipsiprymnus\"   #>  [5] \"garamba__kobus_kob\"              \"garamba__loxodonta_africana\"     #>  [7] \"garamba__ourebia_ourebi\"         \"garamba__redunca_redunca\"        #>  [9] \"garamba__syncerus_caffer\"        \"garamba__tragelaphus_scriptus\""},{"path":"https://frbcesab.github.io/popbayes/reference/plot_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot original vs converted counts — plot_series","title":"Plot original vs converted counts — plot_series","text":"function plots panel two graphics one count series (previously generated format_data()): left side, scatter plot overlapping original (black points) converted counts (grey points); right side, scatter plot converted counts boundaries 95% confident interval.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/plot_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot original vs converted counts — plot_series","text":"","code":"plot_series(series, title = TRUE, path = \".\", path_fig = \".\", save = FALSE)"},{"path":"https://frbcesab.github.io/popbayes/reference/plot_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot original vs converted counts — plot_series","text":"series character string. count series names (can retrieved running list_series()). title logical. TRUE (default) title (series name) added. path character string. directory count series saved function format_data(). path_fig character string. directory save plot (save = TRUE). directory must exist can absolute relative path. save logical. TRUE (default FALSE) plot saved path_fig.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/plot_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot original vs converted counts — plot_series","text":"return value.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/plot_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot original vs converted counts — plot_series","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.  ## Get series names ---- popbayes::list_series(path = temp_path) #>  [1] \"garamba__alcelaphus_buselaphus\"  \"garamba__giraffa_camelopardalis\" #>  [3] \"garamba__hippotragus_equinus\"    \"garamba__kobus_ellipsiprymnus\"   #>  [5] \"garamba__kobus_kob\"              \"garamba__loxodonta_africana\"     #>  [7] \"garamba__ourebia_ourebi\"         \"garamba__redunca_redunca\"        #>  [9] \"garamba__syncerus_caffer\"        \"garamba__tragelaphus_scriptus\"    ## Plot for Alcelaphus buselaphus at Garamba ---- popbayes::plot_series(\"garamba__alcelaphus_buselaphus\", path = temp_path)"},{"path":"https://frbcesab.github.io/popbayes/reference/plot_trend.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot estimated population trend — plot_trend","title":"Plot estimated population trend — plot_trend","text":"function plots panel two graphics one BUGS model (previously generated fit_trend()): left side, population trend estimated Bayesian model (blue line) 95% CI (gray envelop). Dots (intervals) represent converted counts passed model (95% CI); right side, bar plot estimated relative growth rates (r) date. Dark bars real estimated r.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/plot_trend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot estimated population trend — plot_trend","text":"","code":"plot_trend(series, title = TRUE, path = \".\", path_fig = \".\", save = FALSE)"},{"path":"https://frbcesab.github.io/popbayes/reference/plot_trend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot estimated population trend — plot_trend","text":"series character string. count series name (can retrieved running list_series()). title logical. TRUE (default) title (series name) added. path character string. directory count series (BUGS outputs) saved function format_data() (fit_trend()). path_fig character string. directory save plot (save = TRUE). directory must exist can absolute relative path. save logical. TRUE (default FALSE) plot saved path_fig.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/plot_trend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot estimated population trend — plot_trend","text":"return value.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/plot_trend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot estimated population trend — plot_trend","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.  ## Select one serie ---- a_buselaphus <- popbayes::filter_series(garamba_formatted,                                          location = \"Garamba\",                                         species  = \"Alcelaphus buselaphus\") #> ✔ Found 1 series with \"Alcelaphus buselaphus\" and \"Garamba\". # \\donttest{ ## Fit population trends (requires JAGS) ---- a_buselaphus_mod <- popbayes::fit_trend(a_buselaphus, path = temp_path) #> Compiling data graph #>    Resolving undeclared variables #>    Allocating nodes #>    Initializing #>    Reading data back into data table #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 15 #>    Unobserved stochastic nodes: 15 #>    Total graph size: 227 #>  #> Initializing model #>   ## Plot estimated population trend ---- popbayes::plot_trend(series = \"garamba__alcelaphus_buselaphus\",                       path   = temp_path)  # }"},{"path":"https://frbcesab.github.io/popbayes/reference/popbayes-package.html","id":null,"dir":"Reference","previous_headings":"","what":"popbayes: Bayesian Model to Estimate Population Trends from Counts Series — popbayes-package","title":"popbayes: Bayesian Model to Estimate Population Trends from Counts Series — popbayes-package","text":"Infers trends one several animal populations time series counts. accounting count precision (provided inferred based expert knowledge, e.g. guesstimates), smoothing population rate increase time, accounting maximum demographic potential species. Inference carried Bayesian framework. work part FRB-CESAB working group AfroBioDrivers https://www.fondationbiodiversite.fr/en/-frb--action/programs--projects/le-cesab/afrobiodrivers/.","code":""},{"path":[]},{"path":"https://frbcesab.github.io/popbayes/reference/popbayes-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"popbayes: Bayesian Model to Estimate Population Trends from Counts Series — popbayes-package","text":"Maintainer: Nicolas Casajus nicolas.casajus@fondationbiodiversite.fr (ORCID) [copyright holder] Authors: Roger Pradel roger.pradel@cefe.cnrs.fr (ORCID)","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/read_bugs.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a list of BUGS outputs previously exported — read_bugs","title":"Import a list of BUGS outputs previously exported — read_bugs","text":"function imports list BUGS outputs previously exported fit_trend(). Users can import one, several, models.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/read_bugs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a list of BUGS outputs previously exported — read_bugs","text":"","code":"read_bugs(series = NULL, path = \".\")"},{"path":"https://frbcesab.github.io/popbayes/reference/read_bugs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a list of BUGS outputs previously exported — read_bugs","text":"series vector character strings. One several count series names. NULL (default) BUGS outputs count series imported. Users can run list_series() get correct spelling count series names. path character string. directory BUGS outputs saved function fit_trend().","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/read_bugs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a list of BUGS outputs previously exported — read_bugs","text":"n-element list (n number count series). See fit_trend() information.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/read_bugs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a list of BUGS outputs previously exported — read_bugs","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.  ## Select one serie ---- a_buselaphus <- popbayes::filter_series(garamba_formatted,                                          location = \"Garamba\",                                         species  = \"Alcelaphus buselaphus\") #> ✔ Found 1 series with \"Alcelaphus buselaphus\" and \"Garamba\". # \\donttest{ ## Fit population trends (requires JAGS) ---- a_buselaphus_mod <- popbayes::fit_trend(a_buselaphus, path = temp_path) #> Compiling data graph #>    Resolving undeclared variables #>    Allocating nodes #>    Initializing #>    Reading data back into data table #> Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 15 #>    Unobserved stochastic nodes: 15 #>    Total graph size: 227 #>  #> Initializing model #>   ## Import BUGS outputs for one count series ---- popbayes::read_bugs(series = \"garamba__alcelaphus_buselaphus\",                      path   = temp_path) #> $garamba__alcelaphus_buselaphus #> Inference for Bugs model at \"model.bug\", fit using jags, #>  2 chains, each with 50000 iterations (first 10000 discarded), n.thin = 3 #>  n.sims = 26666 iterations saved #>            mu.vect  sd.vect      2.5%       25%       50%       75%     97.5% #> N[1]     17704.622 1732.733 14325.106 16540.416 17703.472 18854.702 21163.344 #> N[2]      3852.142  502.639  2892.122  3508.397  3843.527  4184.916  4857.835 #> N[3]      3313.482  390.724  2546.642  3049.617  3310.108  3578.820  4084.715 #> N[4]      3014.466  429.307  2205.787  2717.981  3003.240  3293.856  3893.400 #> N[5]      2675.016  326.426  2044.811  2451.061  2673.333  2895.294  3318.233 #> N[6]      3218.382  532.626  2269.759  2844.462  3181.803  3555.310  4353.830 #> N[7]      3748.142  663.983  2546.570  3288.082  3705.828  4163.506  5177.966 #> N[8]      3466.347  365.261  2769.738  3216.155  3459.593  3711.216  4200.803 #> N[9]      2886.866  208.334  2487.130  2745.760  2884.456  3027.397  3297.413 #> N[10]     2752.945  204.828  2356.488  2615.835  2749.331  2887.875  3159.933 #> N[11]     2760.178  257.254  2266.479  2584.772  2753.992  2929.448  3276.859 #> N[12]     2637.946  299.094  2078.455  2431.105  2627.825  2836.367  3248.185 #> N[13]     1311.255   73.453  1168.538  1261.814  1310.698  1360.683  1457.331 #> N[14]     1569.207   90.255  1393.237  1507.414  1568.650  1629.738  1747.739 #> N[15]     2393.256  151.154  2102.252  2291.875  2391.633  2494.663  2692.417 #> meanr       -0.049    0.003    -0.054    -0.051    -0.049    -0.047    -0.043 #> r[1]        -0.218    0.023    -0.265    -0.233    -0.218    -0.203    -0.174 #> r[2]        -0.149    0.069    -0.284    -0.195    -0.149    -0.103    -0.014 #> r[3]        -0.049    0.061    -0.168    -0.090    -0.049    -0.008     0.072 #> r[4]        -0.023    0.033    -0.087    -0.046    -0.024    -0.001     0.044 #> r[5]         0.089    0.062    -0.035     0.048     0.090     0.131     0.216 #> r[6]         0.075    0.057    -0.037     0.037     0.076     0.114     0.187 #> r[7]        -0.023    0.051    -0.122    -0.057    -0.023     0.011     0.079 #> r[8]        -0.090    0.050    -0.185    -0.124    -0.091    -0.057     0.009 #> r[9]        -0.024    0.043    -0.109    -0.053    -0.024     0.005     0.061 #> r[10]        0.001    0.067    -0.132    -0.044     0.001     0.046     0.131 #> r[11]       -0.047    0.065    -0.175    -0.092    -0.047    -0.003     0.080 #> r[12]       -0.087    0.015    -0.116    -0.097    -0.087    -0.077    -0.056 #> r[13]        0.090    0.036     0.020     0.066     0.090     0.114     0.159 #> r[14]        0.141    0.028     0.086     0.122     0.141     0.159     0.194 #> sdr          0.112    0.010     0.094     0.105     0.112     0.118     0.132 #> vrrmax       0.461    0.040     0.388     0.434     0.460     0.487     0.543 #> deviance   236.153    5.155   227.325   232.521   235.731   239.276   247.447 #>           Rhat n.eff #> N[1]     1.002  1600 #> N[2]     1.001 27000 #> N[3]     1.001 13000 #> N[4]     1.001 13000 #> N[5]     1.001  7100 #> N[6]     1.001  3200 #> N[7]     1.004  1400 #> N[8]     1.001  6300 #> N[9]     1.001 27000 #> N[10]    1.001 12000 #> N[11]    1.002  2400 #> N[12]    1.002  1400 #> N[13]    1.001 21000 #> N[14]    1.001 27000 #> N[15]    1.001 27000 #> meanr    1.002  1900 #> r[1]     1.001  3000 #> r[2]     1.001 14000 #> r[3]     1.001 27000 #> r[4]     1.001 27000 #> r[5]     1.003  7400 #> r[6]     1.002  3600 #> r[7]     1.003  1900 #> r[8]     1.001 12000 #> r[9]     1.001  6100 #> r[10]    1.001  2900 #> r[11]    1.001  3200 #> r[12]    1.002  1300 #> r[13]    1.001 19000 #> r[14]    1.001 27000 #> sdr      1.002  1300 #> vrrmax   1.002  1300 #> deviance 1.001 27000 #>  #> For each parameter, n.eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor (at convergence, Rhat=1). #>  #> DIC info (using the rule, pD = var(deviance)/2) #> pD = 13.3 and DIC = 249.4 #> DIC is an estimate of expected predictive error (lower deviance is better). #>   ## Import BUGS outputs for all count series ---- popbayes::read_bugs(path = temp_path) #> $garamba__alcelaphus_buselaphus #> Inference for Bugs model at \"model.bug\", fit using jags, #>  2 chains, each with 50000 iterations (first 10000 discarded), n.thin = 3 #>  n.sims = 26666 iterations saved #>            mu.vect  sd.vect      2.5%       25%       50%       75%     97.5% #> N[1]     17704.622 1732.733 14325.106 16540.416 17703.472 18854.702 21163.344 #> N[2]      3852.142  502.639  2892.122  3508.397  3843.527  4184.916  4857.835 #> N[3]      3313.482  390.724  2546.642  3049.617  3310.108  3578.820  4084.715 #> N[4]      3014.466  429.307  2205.787  2717.981  3003.240  3293.856  3893.400 #> N[5]      2675.016  326.426  2044.811  2451.061  2673.333  2895.294  3318.233 #> N[6]      3218.382  532.626  2269.759  2844.462  3181.803  3555.310  4353.830 #> N[7]      3748.142  663.983  2546.570  3288.082  3705.828  4163.506  5177.966 #> N[8]      3466.347  365.261  2769.738  3216.155  3459.593  3711.216  4200.803 #> N[9]      2886.866  208.334  2487.130  2745.760  2884.456  3027.397  3297.413 #> N[10]     2752.945  204.828  2356.488  2615.835  2749.331  2887.875  3159.933 #> N[11]     2760.178  257.254  2266.479  2584.772  2753.992  2929.448  3276.859 #> N[12]     2637.946  299.094  2078.455  2431.105  2627.825  2836.367  3248.185 #> N[13]     1311.255   73.453  1168.538  1261.814  1310.698  1360.683  1457.331 #> N[14]     1569.207   90.255  1393.237  1507.414  1568.650  1629.738  1747.739 #> N[15]     2393.256  151.154  2102.252  2291.875  2391.633  2494.663  2692.417 #> meanr       -0.049    0.003    -0.054    -0.051    -0.049    -0.047    -0.043 #> r[1]        -0.218    0.023    -0.265    -0.233    -0.218    -0.203    -0.174 #> r[2]        -0.149    0.069    -0.284    -0.195    -0.149    -0.103    -0.014 #> r[3]        -0.049    0.061    -0.168    -0.090    -0.049    -0.008     0.072 #> r[4]        -0.023    0.033    -0.087    -0.046    -0.024    -0.001     0.044 #> r[5]         0.089    0.062    -0.035     0.048     0.090     0.131     0.216 #> r[6]         0.075    0.057    -0.037     0.037     0.076     0.114     0.187 #> r[7]        -0.023    0.051    -0.122    -0.057    -0.023     0.011     0.079 #> r[8]        -0.090    0.050    -0.185    -0.124    -0.091    -0.057     0.009 #> r[9]        -0.024    0.043    -0.109    -0.053    -0.024     0.005     0.061 #> r[10]        0.001    0.067    -0.132    -0.044     0.001     0.046     0.131 #> r[11]       -0.047    0.065    -0.175    -0.092    -0.047    -0.003     0.080 #> r[12]       -0.087    0.015    -0.116    -0.097    -0.087    -0.077    -0.056 #> r[13]        0.090    0.036     0.020     0.066     0.090     0.114     0.159 #> r[14]        0.141    0.028     0.086     0.122     0.141     0.159     0.194 #> sdr          0.112    0.010     0.094     0.105     0.112     0.118     0.132 #> vrrmax       0.461    0.040     0.388     0.434     0.460     0.487     0.543 #> deviance   236.153    5.155   227.325   232.521   235.731   239.276   247.447 #>           Rhat n.eff #> N[1]     1.002  1600 #> N[2]     1.001 27000 #> N[3]     1.001 13000 #> N[4]     1.001 13000 #> N[5]     1.001  7100 #> N[6]     1.001  3200 #> N[7]     1.004  1400 #> N[8]     1.001  6300 #> N[9]     1.001 27000 #> N[10]    1.001 12000 #> N[11]    1.002  2400 #> N[12]    1.002  1400 #> N[13]    1.001 21000 #> N[14]    1.001 27000 #> N[15]    1.001 27000 #> meanr    1.002  1900 #> r[1]     1.001  3000 #> r[2]     1.001 14000 #> r[3]     1.001 27000 #> r[4]     1.001 27000 #> r[5]     1.003  7400 #> r[6]     1.002  3600 #> r[7]     1.003  1900 #> r[8]     1.001 12000 #> r[9]     1.001  6100 #> r[10]    1.001  2900 #> r[11]    1.001  3200 #> r[12]    1.002  1300 #> r[13]    1.001 19000 #> r[14]    1.001 27000 #> sdr      1.002  1300 #> vrrmax   1.002  1300 #> deviance 1.001 27000 #>  #> For each parameter, n.eff is a crude measure of effective sample size, #> and Rhat is the potential scale reduction factor (at convergence, Rhat=1). #>  #> DIC info (using the rule, pD = var(deviance)/2) #> pD = 13.3 and DIC = 249.4 #> DIC is an estimate of expected predictive error (lower deviance is better). #>  # }"},{"path":"https://frbcesab.github.io/popbayes/reference/read_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a list of count series previously exported — read_series","title":"Import a list of count series previously exported — read_series","text":"function imports list count series data previously exported format_data(). Users can import one, several, count series data.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/read_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a list of count series previously exported — read_series","text":"","code":"read_series(series = NULL, path = \".\")"},{"path":"https://frbcesab.github.io/popbayes/reference/read_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a list of count series previously exported — read_series","text":"series vector character strings. One several count series names imported. NULL (default), available count series imported. path character string. directory count series saved function format_data().","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/read_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a list of count series previously exported — read_series","text":"n-element list (n number count series). See format_data() information.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/read_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a list of count series previously exported — read_series","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.  ## Import all count series ---- count_series <- popbayes::read_series(path = temp_path)  ## Import one count series ---- a_bus <- popbayes::read_series(series = \"garamba__alcelaphus_buselaphus\",                                path   = temp_path)"},{"path":"https://frbcesab.github.io/popbayes/reference/series_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract original/converted count series data from a list — series_to_df","title":"Extract original/converted count series data from a list — series_to_df","text":"output function format_data() (filter_series()), function extracts data.frame containing converted counts (converted = TRUE) original counts (converted = FALSE) one, several, count series. resulting data.frame particular use popbayes can useful users.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/series_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract original/converted count series data from a list — series_to_df","text":"","code":"series_to_df(data, converted = TRUE)"},{"path":"https://frbcesab.github.io/popbayes/reference/series_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract original/converted count series data from a list — series_to_df","text":"data named list. output format_data() filter_series(). converted logical. TRUE (default) extracts converted counts, otherwise returns original counts.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/series_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract original/converted count series data from a list — series_to_df","text":"data.frame.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/series_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract original/converted count series data from a list — series_to_df","text":"","code":"## Load Garamba raw dataset ---- file_path <- system.file(\"extdata\", \"garamba_survey.csv\",                           package = \"popbayes\")                           garamba <- read.csv(file = file_path)  ## Create temporary folder ---- temp_path <- tempdir()  ## Format dataset ---- garamba_formatted <- popbayes::format_data(   data              = garamba,    path              = temp_path,   field_method      = \"field_method\",   pref_field_method = \"pref_field_method\",   conversion_A2G    = \"conversion_A2G\",   rmax              = \"rmax\") #> ✔ Detecting 10 count series.  ## Extract converted count data ---- converted_data <- popbayes::series_to_df(garamba_formatted,                                           converted = TRUE)  ## Extract original count data ---- original_data <- popbayes::series_to_df(garamba_formatted,                                          converted = FALSE)  dim(converted_data) #> [1] 141  12 dim(original_data) #> [1] 141  11 dim(garamba) #> [1] 141  11"},{"path":"https://frbcesab.github.io/popbayes/reference/species_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Species information dataset — species_info","title":"Species information dataset — species_info","text":"dataset contains information 15 African mammal species. can used function format_data() convert individual counts estimated field method preferred field method. field method can (aerial counts) G (ground counts). See format_data() information. also contains maximum population growth rate (.e. maximum change log population size). User can take dataset template add information missing species. Note species, pref_field_method, conversion_A2G, rmax required.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/species_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species information dataset — species_info","text":"","code":"species_info"},{"path":"https://frbcesab.github.io/popbayes/reference/species_info.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Species information dataset — species_info","text":"data.frame 15 rows (African mammals species) following variables: order order species family family species species species binomial name english species English name french species French name category detectability category species. One MLB Medium-sized Light Brown species (20-150kg), LLB Large Light Brown species (>150kg), LD Large Dark (>150kg), Elephant, Giraffe pref_field_method preferred field method species. One Aerial counts, G Ground counts conversion_A2G conversion multiplicative factor (corresponding detectability category) used convert aerial ground counts rmax maximum population growth rate","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/species_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species information dataset — species_info","text":"","code":"data(\"species_info\") species_info #>           order       family                species             english #> 1  Artiodactyla      Bovidae     Aepyceros melampus              Impala #> 2  Artiodactyla      Bovidae  Alcelaphus buselaphus          Hartebeest #> 3  Artiodactyla      Bovidae  Connochaetes taurinus     Blue wildebeest #> 4  Artiodactyla      Bovidae     Damaliscus lunatus               Tiang #> 5  Artiodactyla      Bovidae     Eudorcas rufifrons Red-fronted gazelle #> 6  Artiodactyla   Giraffidae Giraffa camelopardalis             Giraffe #> 7  Artiodactyla      Bovidae    Hippotragus equinus       Roan Antelope #> 8  Artiodactyla      Bovidae   Kobus ellipsiprymnus           Waterbuck #> 9  Artiodactyla      Bovidae              Kobus kob                 Kob #> 10  Proboscidea Elephantidae     Loxodonta africana    Savanna Elephant #> 11 Artiodactyla      Bovidae         Ourebia ourebi               Oribi #> 12 Artiodactyla      Bovidae        Redunca redunca      Bohor reedbuck #> 13 Artiodactyla      Bovidae        Syncerus caffer     African Buffalo #> 14 Artiodactyla      Bovidae  Tragelaphus derbianus         Giant eland #> 15 Artiodactyla      Bovidae   Tragelaphus scriptus            Bushbuck #>              french category pref_field_method conversion_A2G   rmax #> 1            Impala      MLB                 G          6.747 0.4010 #> 2            Bubale      LLB                 G          2.302 0.2748 #> 3         Gnou bleu      LLB                 G          2.302 0.2679 #> 4              Topi      MLB                 G          6.747 0.2990 #> 5  Gazelle Rufifron      MLB                 G          6.747 0.5270 #> 6            Girafe  Giraffe                 A          3.011 0.1750 #> 7       Hippotrague      LLB                 G          2.302 0.2420 #> 8      Cobe Defassa      MLB                 G          6.747 0.2702 #> 9    Cobe de Buffon      MLB                 G          6.747 0.3802 #> 10         Elephant Elephant                 A          0.659 0.1120 #> 11           Ourebi      MLB                 G          6.747 0.5988 #> 12          Redunca      MLB                 G          6.747 0.4010 #> 13           Buffle       LD                 A          0.561 0.2080 #> 14   Eland de derby      LLB                 G          2.302 0.1500 #> 15    Guib Harnache      MLB                 G          6.747 0.4487"},{"path":"https://frbcesab.github.io/popbayes/reference/w_to_rmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute rmax from adult female body mass — w_to_rmax","title":"Compute rmax from adult female body mass — w_to_rmax","text":"demographic potential species limited. intrinsic rate increase rmax maximum increase log population size species can attain year. According Sinclair (2003), related body mass adult females : \\(1.375 \\times W^{-0.315}\\)","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/w_to_rmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute rmax from adult female body mass — w_to_rmax","text":"","code":"w_to_rmax(w)"},{"path":"https://frbcesab.github.io/popbayes/reference/w_to_rmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute rmax from adult female body mass — w_to_rmax","text":"w numerical vector. Adult female body mass (kg).","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/w_to_rmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute rmax from adult female body mass — w_to_rmax","text":"numerical vector rmax values.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/w_to_rmax.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute rmax from adult female body mass — w_to_rmax","text":"Sinclair (2013) Mammal population regulation, keystone processes ecosystem dynamics. Philosophical Transactions: Biological Sciences, 358, 1729-1740.","code":""},{"path":"https://frbcesab.github.io/popbayes/reference/w_to_rmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute rmax from adult female body mass — w_to_rmax","text":"","code":"## Set adult female body mass ---- body_masses <- c(55, 127)  ## Add species names ---- names(body_masses) <- c(\"Impala\", \"Tiang\")  ## Compute species rmax ---- w_to_rmax(body_masses) #>    Impala     Tiang  #> 0.3891244 0.2989541"},{"path":"https://frbcesab.github.io/popbayes/news/index.html","id":"popbayes-development-version","dir":"Changelog","previous_headings":"","what":"popbayes (development version)","title":"popbayes (development version)","text":"popbayes now uses cli instead usethis error messages (@olivroy, #33).","code":""},{"path":"https://frbcesab.github.io/popbayes/news/index.html","id":"popbayes-12","dir":"Changelog","previous_headings":"","what":"popbayes 1.2","title":"popbayes 1.2","text":"Fix issue format_data() user imports tibble Fix typos documentation","code":""},{"path":"https://frbcesab.github.io/popbayes/news/index.html","id":"popbayes-11","dir":"Changelog","previous_headings":"","what":"popbayes 1.1","title":"popbayes 1.1","text":"CRAN release: 2022-03-04 Change stat_method category G X (eXpert knowledge) avoid confusion category G (Ground counts) field_method variable Set arguments pref_field_method, field_method, conversion_A2G, rmax NULL default format_data() Allow NA values column field_method stat_method = \"X\" Function format_data() now works count series level (whole data set). allow users define different values arguments different counts series (species) Function format_data() returns error confident interval bounds strictly equal","code":""},{"path":"https://frbcesab.github.io/popbayes/news/index.html","id":"popbayes-10","dir":"Changelog","previous_headings":"","what":"popbayes 1.0","title":"popbayes 1.0","text":"CRAN release: 2021-11-05 First release package Submission CRAN","code":""}]
